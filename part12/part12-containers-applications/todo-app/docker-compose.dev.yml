services:
  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes: 
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data_dev:/data/db
    hostname: mongodb_dev
    container_name: mongo-dev
  redis:
    image: redis
    command: ['redis-server', '--appendonly', 'yes']
    volumes: 
      - redis_data_dev:/data
    hostname: redis_dev
    container_name: redis-dev
  server:
    image: todo-backend-dev
    build:
      context: ./todo-backend # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./todo-backend/:/usr/src/app
    environment: # can hardcode these since only the dev server
    - MONGO_URL=mongodb://the_username:the_password@mongodb_dev:27017/the_database
    - REDIS_URL=redis://redis_dev:6379
    container_name: server-dev
    hostname: server_dev
  app:
    image: todo-frontend-dev
    build:
      context: ./todo-frontend # The context will pick this directory as the "build context"
      dockerfile: ./dev.Dockerfile # This will simply tell which dockerfile to read
    environment:
    - REACT_APP_BACKEND_URL=http://localhost:8080/api
    - WDS_SOCKET_HOST=127.0.0.1
    - WATCHPACK_POLLING=true
    volumes:
      - ./todo-frontend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    container_name: todo-frontend-dev-app # This will name the container hello-front-dev
    hostname: app_dev
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy-dev
    depends_on:
      - app # wait for the frontend container to be started
volumes:
  mongo_data_dev:
  redis_data_dev: